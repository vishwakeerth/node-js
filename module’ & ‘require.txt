Everything you should know about ‘module’ & ‘require’ in Node.js

Node uses two core modules for managing module dependencies:

1.The require module, which appears to be available on the global scope — no need to require('require').
2.The module module, which also appears to be available on the global scope — no need to require('module').

The main object exported by the require module is a function (as used in the above example). When Node invokes that require() function with a local file path as the function’s only argument, Node goes through the following sequence of steps:

(i)Resolving: To find the absolute path of the file.
(ii)Loading: To determine the type of the file content.
(iii)Wrapping: To give the file its private scope. This is what makes both the require and module objects local to every file we require.
(iv)Evaluating: This is what the VM eventually does with the loaded code.
(v)Caching: So that when we require this file again, we don’t go over all the steps another time